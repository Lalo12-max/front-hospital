\documentclass[12pt,a4paper]{article}
\usepackage[utf8]{inputenc}
\usepackage[spanish]{babel}
\usepackage{geometry}
\usepackage{listings}
\usepackage{xcolor}
\usepackage{hyperref}
\usepackage{graphicx}
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{amssymb}

\geometry{margin=2.5cm}

\title{Sistema Hospitalario Frontend - Documentación Técnica}
\author{Documentación del Sistema}
\date{\today}

\lstset{
    basicstyle=\ttfamily\small,
    keywordstyle=\color{blue},
    commentstyle=\color{green},
    stringstyle=\color{red},
    breaklines=true,
    frame=single,
    numbers=left,
    numberstyle=\tiny
}

\begin{document}

\maketitle
\tableofcontents
\newpage

\section{Introducción}

Este documento describe la arquitectura y funcionamiento del sistema hospitalario frontend desarrollado en Angular 18. El sistema proporciona una interfaz web completa para la gestión de un hospital, incluyendo usuarios, consultas, expedientes médicos, horarios y recetas.

\section{Arquitectura del Sistema}

\subsection{Tecnologías Utilizadas}
\begin{itemize}
    \item Angular 18 con TypeScript
    \item PrimeNG para componentes UI
    \item RxJS para programación reactiva
    \item JWT para autenticación
    \item TOTP para autenticación de dos factores (MFA)
\end{itemize}

\subsection{Estructura del Proyecto}
El proyecto sigue la estructura estándar de Angular con separación clara de responsabilidades:
\begin{itemize}
    \item \textbf{Interceptors}: Manejo de autenticación, errores y loading
    \item \textbf{Models}: Definición de interfaces TypeScript
    \item \textbf{Services}: Lógica de negocio y comunicación con API
    \item \textbf{Pages}: Componentes de páginas principales
    \item \textbf{Auth}: Componentes de autenticación
\end{itemize}

\section{Interceptors}

\subsection{Auth Interceptor}
\textbf{Archivo}: \texttt{auth.interceptor.ts}

\textbf{Propósito}: Intercepta todas las peticiones HTTP para agregar automáticamente el token de autenticación y manejar errores de autorización.

\textbf{Funcionalidad}:
\begin{itemize}
    \item Obtiene el token de acceso del localStorage
    \item Agrega el header \texttt{Authorization: Bearer <token>} a todas las peticiones
    \item Maneja errores 401 (no autorizado) redirigiendo al login
    \item Maneja errores 403 (permisos insuficientes) mostrando mensajes de error
    \item Limpia tokens expirados automáticamente
\end{itemize}

\textbf{Implementación}:
\begin{lstlisting}[language=TypeScript]
export const authInterceptor: HttpInterceptorFn = (req, next) => {
  const router = inject(Router);
  const token = localStorage.getItem('access_token');

  if (token) {
    req = req.clone({
      setHeaders: {
        Authorization: `Bearer ${token}`
      }
    });
  }

  return next(req).pipe(
    catchError(error => {
      if (error.status === 401) {
        localStorage.removeItem('access_token');
        localStorage.removeItem('refresh_token');
        router.navigate(['/login']);
      }
      return throwError(() => error);
    })
  );
};
\end{lstlisting}

\subsection{Error Interceptor}
\textbf{Archivo}: \texttt{error.interceptor.ts}

\textbf{Propósito}: Maneja errores HTTP de forma centralizada y proporciona respuestas consistentes.

\textbf{Funcionalidad}:
\begin{itemize}
    \item Intercepta errores HTTP globalmente
    \item Maneja diferentes códigos de estado (401, 403, 500)
    \item Proporciona logging centralizado de errores
    \item Redirige automáticamente en caso de sesión expirada
\end{itemize}

\subsection{Loading Interceptor}
\textbf{Archivo}: \texttt{loading.interceptor.ts}

\textbf{Propósito}: Gestiona el estado de carga global de la aplicación.

\textbf{Funcionalidad}:
\begin{itemize}
    \item Muestra indicadores de carga durante peticiones HTTP
    \item Utiliza el operador \texttt{finalize} para ocultar el loading
    \item Proporciona un servicio \texttt{LoadingService} para control manual
\end{itemize}

\section{Modelos de Datos}

\subsection{Usuario Model}
\textbf{Archivo}: \texttt{usuario.model.ts}

\textbf{Propósito}: Define la estructura de datos para usuarios del sistema.

\textbf{Características}:
\begin{itemize}
    \item Enum \texttt{TipoUsuario} con roles: PACIENTE, MEDICO, ENFERMERA, ADMIN
    \item Interface \texttt{Usuario} con campos básicos y metadatos
    \item Interface \texttt{CreateUsuarioRequest} para creación
    \item Interfaces para MFA: \texttt{MFASetupResponse}, \texttt{MFAVerifyRequest}
\end{itemize}

\subsection{Consulta Model}
\textbf{Archivo}: \texttt{consulta.model.ts}

\textbf{Propósito}: Estructura para gestión de consultas médicas.

\textbf{Campos principales}:
\begin{itemize}
    \item \texttt{consultorio\_id}: Referencia al consultorio
    \item \texttt{medico\_id}: Referencia al médico
    \item \texttt{paciente\_id}: Referencia al paciente
    \item \texttt{tipo}: Tipo de consulta (general, especialidad, urgencia)
    \item \texttt{horario}: Fecha y hora de la consulta
    \item \texttt{diagnostico}: Diagnóstico opcional
    \item \texttt{costo}: Costo de la consulta
\end{itemize}

\subsection{Consultorio Model}
\textbf{Archivo}: \texttt{consultorio.model.ts}

\textbf{Propósito}: Define la estructura de consultorios médicos.

\textbf{Campos}:
\begin{itemize}
    \item \texttt{nombre}: Nombre del consultorio
    \item \texttt{tipo}: Especialidad médica
    \item \texttt{ubicacion}: Ubicación física
    \item \texttt{medico\_id}: Médico asignado (opcional)
\end{itemize}

\subsection{Expediente Model}
\textbf{Archivo}: \texttt{expediente.model.ts}

\textbf{Propósito}: Gestión de historiales médicos de pacientes.

\textbf{Campos}:
\begin{itemize}
    \item \texttt{paciente\_id}: Referencia al paciente
    \item \texttt{antecedentes}: Antecedentes médicos
    \item \texttt{historial\_clinico}: Historial clínico detallado
    \item \texttt{seguro}: Información del seguro médico
\end{itemize}

\subsection{Horario Model}
\textbf{Archivo}: \texttt{horario.model.ts}

\textbf{Propósito}: Gestión de horarios médicos.

\textbf{Campos}:
\begin{itemize}
    \item \texttt{consultorio\_id}: Consultorio asignado
    \item \texttt{medico\_id}: Médico asignado
    \item \texttt{turno}: Turno (mañana, tarde, noche)
    \item \texttt{consulta\_id}: Consulta asociada (opcional)
\end{itemize}

\subsection{Receta Model}
\textbf{Archivo}: \texttt{receta.model.ts}

\textbf{Propósito}: Gestión de prescripciones médicas.

\textbf{Campos}:
\begin{itemize}
    \item \texttt{fecha}: Fecha de prescripción
    \item \texttt{medico\_id}: Médico que prescribe
    \item \texttt{paciente\_id}: Paciente receptor
    \item \texttt{consultorio\_id}: Consultorio donde se prescribe
    \item \texttt{medicamento}: Nombre del medicamento
    \item \texttt{dosis}: Dosis y frecuencia
\end{itemize}

\section{Servicios}

\subsection{Auth Service}
\textbf{Archivo}: \texttt{auth.service.ts}

\textbf{Propósito}: Gestiona la autenticación y autorización del usuario.

\textbf{Funcionalidades principales}:
\begin{itemize}
    \item \textbf{Login}: Autenticación con email/password y MFA opcional
    \item \textbf{Register}: Registro de nuevos usuarios
    \item \textbf{Token Management}: Decodificación y gestión de JWT
    \item \textbf{User State}: BehaviorSubject para estado reactivo del usuario
    \item \textbf{Permissions}: Obtención de permisos del usuario
\end{itemize}

\textbf{Características técnicas}:
\begin{itemize}
    \item Decodificación manual de JWT para extraer información del usuario
    \item Manejo de plataforma (browser/server) con \texttt{isPlatformBrowser}
    \item Persistencia de tokens en localStorage
    \item Recarga automática de información de usuario desde token
\end{itemize}

\subsection{Servicios CRUD}
Todos los servicios de entidades (\texttt{consulta.service.ts}, \texttt{consultorio.service.ts}, etc.) siguen el mismo patrón:

\textbf{Operaciones estándar}:
\begin{itemize}
    \item \texttt{get[Entity]s()}: Obtener lista completa
    \item \texttt{get[Entity](id)}: Obtener por ID
    \item \texttt{create[Entity](data)}: Crear nueva entidad
    \item \texttt{update[Entity](id, data)}: Actualizar entidad
    \item \texttt{delete[Entity](id)}: Eliminar entidad
\end{itemize}

\textbf{Configuración}:
\begin{itemize}
    \item URL base: \texttt{http://localhost:3001/api/v1/}
    \item Uso de HttpClient de Angular
    \item Retorno de Observables para programación reactiva
\end{itemize}

\subsection{Permission Service}
\textbf{Archivo}: \texttt{permission.service.ts}

\textbf{Propósito}: Gestiona permisos y acceso a módulos según el rol del usuario.

\textbf{Funcionalidades}:
\begin{itemize}
    \item Definición de módulos y roles permitidos
    \item \texttt{getAvailableModules(userType)}: Módulos disponibles por rol
    \item \texttt{hasAccessToModule(userType, route)}: Verificación de acceso
\end{itemize}

\textbf{Configuración de permisos}:
\begin{itemize}
    \item \textbf{Admin}: Acceso completo a todos los módulos
    \item \textbf{Médico/Enfermera}: Acceso a consultorios, consultas, expedientes, horarios, recetas
    \item \textbf{Paciente}: Acceso limitado a consultas, expedientes y recetas (solo lectura)
\end{itemize}

\section{Componentes de Autenticación}

\subsection{Login Component}
\textbf{Archivos}: \texttt{login.component.ts}, \texttt{login.component.html}

\textbf{Funcionalidades}:
\begin{itemize}
    \item Formulario reactivo con validaciones
    \item Soporte para MFA con código TOTP
    \item Configuración automática de MFA para nuevos usuarios
    \item Generación de códigos QR para aplicaciones de autenticación
    \item Manejo de diferentes respuestas del servidor (códigos de estado)
\end{itemize}

\textbf{Flujo de autenticación}:
\begin{enumerate}
    \item Usuario ingresa email y contraseña
    \item Si MFA está habilitado, solicita código TOTP
    \item Si es primer login, configura MFA automáticamente
    \item Almacena tokens y redirige al dashboard
\end{enumerate}

\subsection{Register Component}
\textbf{Archivos}: \texttt{register.component.ts}, \texttt{register.component.html}

\textbf{Funcionalidades}:
\begin{itemize}
    \item Registro de nuevos usuarios (tipo paciente por defecto)
    \item Validación robusta de contraseñas con requisitos de seguridad
    \item Configuración automática de MFA durante el registro
    \item Interfaz visual para mostrar requisitos de contraseña
\end{itemize}

\textbf{Validaciones de contraseña}:
\begin{itemize}
    \item Mínimo 12 caracteres
    \item Al menos un número
    \item Al menos una letra minúscula
    \item Al menos una letra mayúscula
    \item Al menos un símbolo especial
\end{itemize}

\section{Componentes Principales}

\subsection{Dashboard Component}
\textbf{Archivos}: \texttt{dashboard.component.ts}, \texttt{dashboard.component.html}, \texttt{dashboard.component.css}

\textbf{Propósito}: Página principal que muestra módulos disponibles según permisos del usuario.

\textbf{Funcionalidades}:
\begin{itemize}
    \item Verificación de autenticación al cargar
    \item Carga dinámica de módulos según rol del usuario
    \item Navegación a diferentes secciones del sistema
    \item Información del usuario logueado
    \item Funcionalidad de logout
\end{itemize}

\textbf{Características técnicas}:
\begin{itemize}
    \item Uso de \texttt{isPlatformBrowser} para SSR compatibility
    \item Manejo de estados de carga y error
    \item Integración con \texttt{PermissionService}
\end{itemize}

\subsection{Usuarios Component}
\textbf{Archivos}: \texttt{usuarios.component.ts}, \texttt{usuarios.component.html}, \texttt{usuarios.component.css}

\textbf{Propósito}: Gestión completa de usuarios del sistema (solo para administradores).

\textbf{Funcionalidades}:
\begin{itemize}
    \item CRUD completo de usuarios
    \item Tabla paginada con información de usuarios
    \item Formulario modal para crear/editar usuarios
    \item Validaciones de formulario
    \item Indicadores de estado MFA
    \item Diferentes tipos de usuario con badges de colores
\end{itemize}

\subsection{Consultas Component}
\textbf{Archivos}: \texttt{consultas.component.ts}, \texttt{consultas.component.html}, \texttt{consultas.component.css}

\textbf{Propósito}: Gestión de consultas médicas con control de permisos por rol.

\textbf{Funcionalidades}:
\begin{itemize}
    \item Vista de consultas con información completa
    \item Creación/edición de consultas (médicos y enfermeras)
    \item Vista de solo lectura para pacientes
    \item Formulario con dropdowns para médicos, pacientes y consultorios
    \item Validación de fechas y horarios
    \item Tags de colores para tipos de consulta
\end{itemize}

\textbf{Control de permisos}:
\begin{itemize}
    \item Pacientes: Solo lectura
    \item Médicos/Enfermeras/Admin: Lectura y escritura
\end{itemize}

\subsection{Consultorios Component}
\textbf{Archivos}: \texttt{consultorios.component.ts}, \texttt{consultorios.component.html}, \texttt{consultorios.component.css}

\textbf{Funcionalidades}:
\begin{itemize}
    \item Gestión de consultorios médicos
    \item Asignación de médicos a consultorios
    \item Tipos de consultorio predefinidos
    \item Información de ubicación
\end{itemize}

\subsection{Expedientes Component}
\textbf{Archivos}: \texttt{expedientes.component.ts}, \texttt{expedientes.component.html}, \texttt{expedientes.component.css}

\textbf{Funcionalidades}:
\begin{itemize}
    \item Gestión de historiales médicos
    \item Campos de texto largo para antecedentes e historial
    \item Asociación con pacientes
    \item Control de permisos similar a consultas
\end{itemize}

\subsection{Horarios Component}
\textbf{Archivos}: \texttt{horarios.component.ts}, \texttt{horarios.component.html}, \texttt{horarios.component.css}

\textbf{Funcionalidades}:
\begin{itemize}
    \item Gestión de horarios médicos
    \item Turnos predefinidos (mañana, tarde, noche)
    \item Asociación con consultorios y médicos
    \item Vinculación opcional con consultas específicas
\end{itemize}

\subsection{Recetas Component}
\textbf{Archivos}: \texttt{recetas.component.ts}, \texttt{recetas.component.html}, \texttt{recetas.component.css}

\textbf{Funcionalidades}:
\begin{itemize}
    \item Gestión de prescripciones médicas
    \item Formulario completo con medicamento y dosis
    \item Asociación con médico, paciente y consultorio
    \item Control de permisos por rol
\end{itemize}

\section{Características Técnicas Avanzadas}

\subsection{Autenticación de Dos Factores (MFA)}
El sistema implementa TOTP (Time-based One-Time Password) para mayor seguridad:

\begin{itemize}
    \item Generación automática de claves secretas
    \item Códigos QR para configuración en apps móviles
    \item Verificación de códigos de 6 dígitos
    \item Configuración automática en primer login
\end{itemize}

\subsection{Sistema de Permisos}
Implementación granular de permisos basada en roles:

\begin{itemize}
    \item Definición declarativa de permisos por módulo
    \item Verificación en frontend y backend
    \item Control de visibilidad de botones y acciones
    \item Redirección automática en caso de acceso no autorizado
\end{itemize}

\subsection{Manejo de Estados}
\begin{itemize}
    \item Uso de RxJS para programación reactiva
    \item BehaviorSubject para estado del usuario
    \item Observables para comunicación entre componentes
    \item Manejo de loading states globales
\end{itemize}

\subsection{Interfaz de Usuario}
\begin{itemize}
    \item PrimeNG para componentes consistentes
    \item Diseño responsivo con CSS Grid y Flexbox
    \item Temas personalizados con variables CSS
    \item Animaciones y transiciones suaves
    \item Tooltips y mensajes informativos
\end{itemize}

\section{Configuración y Arquitectura}

\subsection{Configuración de la Aplicación}
\textbf{Archivo}: \texttt{app.config.ts}

\textbf{Configuraciones principales}:
\begin{itemize}
    \item Proveedores de servicios
    \item Configuración de interceptors
    \item Configuración de PrimeNG con tema Aura
    \item Configuración de animaciones
\end{itemize}

\subsection{Rutas}
\textbf{Archivo}: \texttt{app.routes.ts}

\textbf{Configuración de rutas}:
\begin{itemize}
    \item Lazy loading para todos los componentes
    \item Redirección por defecto a login
    \item Rutas protegidas implícitamente por interceptors
\end{itemize}

\subsection{Estilos Globales}
\textbf{Archivo}: \texttt{styles.css}

\textbf{Características}:
\begin{itemize}
    \item Variables CSS para temas consistentes
    \item Estilos para componentes de autenticación
    \item Estilos para tablas y formularios
    \item Responsive design
    \item Estilos para paginación personalizada
\end{itemize}

\section{Flujos de Trabajo}

\subsection{Flujo de Autenticación}
\begin{enumerate}
    \item Usuario accede a la aplicación
    \item Redirección automática a /login si no hay token
    \item Ingreso de credenciales
    \item Verificación MFA si está habilitado
    \item Almacenamiento de tokens
    \item Redirección al dashboard
    \item Carga de permisos y módulos disponibles
\end{enumerate}

\subsection{Flujo de Gestión de Entidades}
\begin{enumerate}
    \item Navegación desde dashboard
    \item Verificación de permisos
    \item Carga de datos desde API
    \item Visualización en tabla paginada
    \item Operaciones CRUD según permisos
    \item Validación de formularios
    \item Actualización de vista
\end{enumerate}

\section{Seguridad}

\subsection{Medidas de Seguridad Implementadas}
\begin{itemize}
    \item Autenticación JWT con refresh tokens
    \item MFA obligatorio para mayor seguridad
    \item Validación de permisos en frontend y backend
    \item Limpieza automática de tokens expirados
    \item Validaciones robustas de formularios
    \item Sanitización de inputs
    \item HTTPS requerido en producción
\end{itemize}

\subsection{Validaciones de Contraseña}
\begin{itemize}
    \item Longitud mínima de 12 caracteres
    \item Complejidad requerida (mayúsculas, minúsculas, números, símbolos)
    \item Verificación en tiempo real
    \item Confirmación de contraseña
\end{itemize}

\section{Conclusión}

El sistema hospitalario frontend representa una solución completa y robusta para la gestión hospitalaria, implementando las mejores prácticas de desarrollo web moderno. La arquitectura modular, el sistema de permisos granular y las medidas de seguridad implementadas garantizan un sistema escalable, mantenible y seguro.

Las características principales incluyen:
\begin{itemize}
    \item Autenticación segura con MFA
    \item Sistema de permisos basado en roles
    \item Interfaz intuitiva y responsiva
    \item Gestión completa de entidades hospitalarias
    \item Arquitectura escalable y mantenible
\end{itemize}

Este sistema proporciona una base sólida para la digitalización de procesos hospitalarios, mejorando la eficiencia operativa y la seguridad de los datos médicos.

\end{document}